更多细节以及学习

一般来说，完整的JavaScript包括以下几个部分：

	ECMAScript，描述了该语言的语法和基本对象
	文档对象模型（DOM），描述处理网页内容的方法和接口
	浏览器对象模型（BOM），描述与浏览器进行交互的方法和接口
	它的基本特点如下：

	是一种解释性脚本语言（代码不进行预编译）。
	主要用来向HTML页面添加交互行为。
	可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。
	JavaScript常用来完成以下任务：

	嵌入动态文本于HTML页面
	对浏览器事件作出响应
	读写HTML元素
	在数据被提交到服务器之前验证数据
	检测访客的浏览器信息
	控制cookies，包括创建和修改等

	
<!DOCTYPE HTML>
<html>
    <head>
    <title>简单的JavaScript Hello world</title>
        <script type="text/javascript">
            document.write("Hello, world!");   
			// -{zh-cn:在浏览器视窗内直接显示;}-
            alert("Hello, world!");            
			// -{zh-cn:弹窗显示;}-
            console.log("Hello, world!");      	//-{zh-cn:在控制台（console）里显示，需要先开启开发工具控制台}-
        </script>
    </head>
    <body>
　　　　HTML 内容
    </body>
</html>

首先我们都已经学会了HTML的使用方法，所以一些HTML标签的用法我就不再讲述了。
	document.write("Hello, world!");   
		该代码的意思就是在浏览器视窗显示Hello, world!

	alert("Hello, world!"); 
		该代码的意思就是弹出Hello, world!的窗口
	
	console.log("Hello, world!");
		在控制台（console）里显示Hello, world!
		
这就是JavaScript最基础的用法


接下来的部分大部分取自与w3school，并且加入了作者本人的相关解析。

首先，JavaScript在网页上基本上是为了控制DOM。

举个例子：

<!DOCTYPE html>
<html>
<body>

<p>
JavaScript 能够直接写入 HTML 输出流中：
</p>

<script>
document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph.</p>");
</script>

<p>
您只能在 HTML 输出流中使用 <strong>document.write</strong>。
如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。
</p>

</body>
</html>


这样的例子就说明，javascript可以控制HTML的输出流，而此处，输出流的意思就是随着HTML文档的先后顺序，如果在文档的加载时使用，则会按照顺序依次输出。


1
2
3

这样的话，就是显示

1
2
3
但是如果使用了document.write("");：

1
2
3

（document.write("1");）
就会显示
1

可以在该页面中做各种测试
http://www.w3school.com.cn/tiy/t.asp?f=js_intro_document_write

